# Production Docker Compose for SecureVault
# This is a production-ready deployment configuration
version: '3.8'

services:
  # PostgreSQL Database with production settings
  postgres:
    image: postgres:15-alpine
    container_name: securevault_postgres_prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: securevault_prod
      POSTGRES_USER: securevault_user
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
      - ./database/backups:/backups
    ports:
      - "5432:5432"
    command: >
      postgres
      -c ssl=on
      -c ssl_cert_file=/var/lib/postgresql/server.crt
      -c ssl_key_file=/var/lib/postgresql/server.key
      -c log_statement=all
      -c log_duration=on
      -c log_connections=on
      -c log_disconnections=on
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U securevault_user -d securevault_prod"]
      interval: 10s
      timeout: 5s
      retries: 5
    security_opt:
      - no-new-privileges:true
    networks:
      - securevault_network

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: securevault_redis_prod
    restart: unless-stopped
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --appendonly yes
      --appendfsync everysec
      --save 900 1
      --save 300 10
      --save 60 10000
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --tcp-keepalive 300
      --timeout 0
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/etc/redis/redis.conf:ro
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    security_opt:
      - no-new-privileges:true
    networks:
      - securevault_network

  # Backend API Server
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.production
      args:
        BUILD_VERSION: ${BUILD_VERSION}
        BUILD_DATE: ${BUILD_DATE}
        GIT_COMMIT: ${GIT_COMMIT}
    container_name: securevault_backend_prod
    restart: unless-stopped
    environment:
      # Database Configuration
      DB_HOST: postgres
      DB_NAME: securevault_prod
      DB_USER: securevault_user
      DB_PASSWORD: ${DB_PASSWORD}
      DB_ENCRYPTION_KEY: ${DB_ENCRYPTION_KEY}
      
      # Redis Configuration
      REDIS_URL: redis://redis:6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      
      # Security Configuration
      JWT_SECRET: ${JWT_SECRET}
      HMAC_SECRET: ${HMAC_SECRET}
      CSRF_SECRET: ${CSRF_SECRET}
      
      # MFA Configuration
      TWILIO_ACCOUNT_SID: ${TWILIO_ACCOUNT_SID}
      TWILIO_AUTH_TOKEN: ${TWILIO_AUTH_TOKEN}
      TWILIO_PHONE_NUMBER: ${TWILIO_PHONE_NUMBER}
      SMTP_HOST: ${SMTP_HOST}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
      PUSHOVER_APP_TOKEN: ${PUSHOVER_APP_TOKEN}
      PUSHOVER_USER_KEY: ${PUSHOVER_USER_KEY}
      
      # Monitoring and Logging
      JAEGER_ENDPOINT: ${JAEGER_ENDPOINT}
      LOG_LEVEL: info
      
      # Application Configuration
      SERVER_PORT: 8080
      GIN_MODE: release
      TRUSTED_PROXIES: ${TRUSTED_PROXIES}
      
      # Feature Flags
      ENABLE_AUDIT_LOGGING: true
      ENABLE_RATE_LIMITING: true
      ENABLE_INTRUSION_DETECTION: true
      ENABLE_MFA_ENFORCEMENT: true
    ports:
      - "8080:8080"
      - "9090:9090"  # Metrics port
      - "8081:8081"  # Health check port
    volumes:
      - ./logs:/app/logs
      - ./certs:/app/certs:ro
      - ./config:/app/config:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:rw,noexec,nosuid,size=100m
    networks:
      - securevault_network

  # Frontend Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.production
      args:
        VITE_API_URL: https://api.${DOMAIN_NAME}
        VITE_APP_VERSION: ${BUILD_VERSION}
        VITE_BUILD_DATE: ${BUILD_DATE}
    container_name: securevault_frontend_prod
    restart: unless-stopped
    ports:
      - "3000:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./certs:/etc/nginx/certs:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'
    security_opt:
      - no-new-privileges:true
    networks:
      - securevault_network

  # Admin Dashboard
  admin-dashboard:
    build:
      context: ./admin-dashboard
      dockerfile: Dockerfile.production
      args:
        VITE_API_URL: https://api.${DOMAIN_NAME}
        VITE_APP_VERSION: ${BUILD_VERSION}
    container_name: securevault_admin_prod
    restart: unless-stopped
    environment:
      - NODE_ENV=production
    ports:
      - "3001:80"
    volumes:
      - ./nginx/admin-nginx.conf:/etc/nginx/nginx.conf:ro
      - ./certs:/etc/nginx/certs:ro
      - ./logs/admin-nginx:/var/log/nginx
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
    security_opt:
      - no-new-privileges:true
    networks:
      - securevault_network

  # Nginx Load Balancer / Reverse Proxy
  nginx:
    image: nginx:1.25-alpine
    container_name: securevault_nginx_prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/production.conf:/etc/nginx/nginx.conf:ro
      - ./certs:/etc/nginx/certs:ro
      - ./nginx/security-headers.conf:/etc/nginx/security-headers.conf:ro
      - ./logs/nginx:/var/log/nginx
      - /var/run/docker.sock:/tmp/docker.sock:ro
    depends_on:
      - backend
      - frontend
      - admin-dashboard
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
    security_opt:
      - no-new-privileges:true
    networks:
      - securevault_network

  # Monitoring and Observability - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: securevault_prometheus_prod
    restart: unless-stopped
    ports:
      - "9091:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=90d'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--log.level=info'
    networks:
      - securevault_network

  # Grafana for Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: securevault_grafana_prod
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_SECURITY_SECRET_KEY: ${GRAFANA_SECRET_KEY}
      GF_INSTALL_PLUGINS: grafana-piechart-panel
    ports:
      - "3002:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - securevault_network

  # Log aggregation with ELK Stack - Elasticsearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: securevault_elasticsearch_prod
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx1g"
      - xpack.security.enabled=false
      - xpack.monitoring.collection.enabled=true
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
    networks:
      - securevault_network

  # Logstash
  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    container_name: securevault_logstash_prod
    restart: unless-stopped
    volumes:
      - ./logs:/logs:ro
      - ./monitoring/logstash/pipeline:/usr/share/logstash/pipeline:ro
      - ./monitoring/logstash/config:/usr/share/logstash/config:ro
    depends_on:
      - elasticsearch
    networks:
      - securevault_network

  # Kibana
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: securevault_kibana_prod
    restart: unless-stopped
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
      SERVER_NAME: kibana.${DOMAIN_NAME}
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - securevault_network

  # Backup Service
  backup:
    build:
      context: ./scripts/backup
      dockerfile: Dockerfile
    container_name: securevault_backup_prod
    restart: unless-stopped
    environment:
      DB_HOST: postgres
      DB_NAME: securevault_prod
      DB_USER: securevault_user
      DB_PASSWORD: ${DB_PASSWORD}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      S3_BUCKET: ${BACKUP_S3_BUCKET}
      BACKUP_ENCRYPTION_KEY: ${BACKUP_ENCRYPTION_KEY}
      BACKUP_SCHEDULE: "0 2 * * *"  # Daily at 2 AM
    volumes:
      - postgres_data:/postgres_data:ro
      - redis_data:/redis_data:ro
      - ./backups:/backups
    depends_on:
      - postgres
      - redis
    networks:
      - securevault_network

  # Security Scanner
  security-scanner:
    build:
      context: ./scripts/security
      dockerfile: Dockerfile
    container_name: securevault_security_scanner_prod
    restart: unless-stopped
    environment:
      SCAN_INTERVAL: 3600  # Hourly scans
      VULNERABILITY_DB_URL: ${VULNERABILITY_DB_URL}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./logs/security:/logs
    networks:
      - securevault_network

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /data/securevault/postgres
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /data/securevault/redis
  prometheus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /data/securevault/prometheus
  grafana_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /data/securevault/grafana
  elasticsearch_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /data/securevault/elasticsearch

networks:
  securevault_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16