version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: securevault-postgres
    environment:
      POSTGRES_DB: securevault
      POSTGRES_USER: securevault
      POSTGRES_PASSWORD: securevault123
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U securevault -d securevault"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - securevault-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: securevault-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: unless-stopped
    networks:
      - securevault-network

  # Elasticsearch for search
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: securevault-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    networks:
      - securevault-network

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: securevault-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - securevault-network

  # Grafana for dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: securevault-grafana
    ports:
      - "3002:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    restart: unless-stopped
    networks:
      - securevault-network

  # Backend API (development)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: securevault-backend
    ports:
      - "8080:8080"
    environment:
      - SECUREVAULT_DATABASE_URL=postgres://securevault:securevault123@postgres:5432/securevault?sslmode=prefer
      - SECUREVAULT_REDIS_URL=redis://redis:6379
      - SECUREVAULT_SERVER_ENVIRONMENT=development
      - SECUREVAULT_JWT_SECRET=production-jwt-secret-key-change-this
      - SECUREVAULT_HMAC_SECRET=production-hmac-secret-key-change-this
      - SECUREVAULT_CSRF_SECRET=production-csrf-secret-key-change-this
      - SECUREVAULT_DATABASE_ENCRYPTION_KEY=32-byte-encryption-key-for-production
    volumes:
      - ./backend:/app
      - /app/vendor
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - securevault-network

  # Frontend Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: securevault-frontend
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8080
      - REACT_APP_ENVIRONMENT=development
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - securevault-network

  # Admin Dashboard
  admin-dashboard:
    build:
      context: ./admin-dashboard
      dockerfile: Dockerfile
    container_name: securevault-admin-dashboard
    ports:
      - "3001:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8080
      - REACT_APP_ENVIRONMENT=development
    volumes:
      - ./admin-dashboard:/app
      - /app/node_modules
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - securevault-network

  # Desktop Client Build (optional)
  desktop-build:
    build:
      context: ./desktop-client
      dockerfile: Dockerfile
    container_name: securevault-desktop-build
    volumes:
      - ./desktop-client:/app
      - desktop_builds:/app/src-tauri/target
    profiles:
      - desktop
    networks:
      - securevault-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  elasticsearch_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  desktop_builds:
    driver: local

networks:
  securevault-network:
    driver: bridge
